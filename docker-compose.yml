services:
  merchandise-services:
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      -  "8080:80"  
      - "5060:5006"
      - "5062:5008" 
    depends_on:
      jaeger:
        condition: service_started
      merchandise-services-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      OTEL_EXPORTER_JAEGER_AGENT_HOST: jaeger
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"
      OTEL_EXPORTER_JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
      StockApiGrpcServiceConfiguration__ServerAddress: "http://stock-api:82"    
      DatabaseConnectionOptions__ConnectionString: >
        Host=merchandise-services-db;
        Port=5432;
        Database=merchandise-services;
        Username=postgres;
        Password=merchandiseServicesPassword
    networks:
      - merch-network  
    restart: unless-stopped
      
  merchandise-services-db:
    image: postgres:latest
    volumes:
      - pgdata:/var/lib/postgresql/data
     # - ./pg_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: merchandiseServicesPassword
      POSTGRES_DB: merchandise-services
    command: "-c log_statement=all"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"] #встроенная команда PostgreSQL, говорит: "Я готов!"
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - merch-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  redis:
    image: redis
    volumes:
      - redisdata:/data 
     # - ./redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - merch-network
    hostname: redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M

  elasticsearch:
    image: elastic/elasticsearch:7.17.17
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - merch-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

  kibana:
    image: elastic/kibana:7.17.17
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - '5601:5601'
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - merch-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "6831:6831/udp"
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true  # если нужен OTLP
    networks:
      - merch-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: unless-stopped

networks:
  merch-network:
    driver: bridge    

volumes:
  pgdata:
  redisdata:  
  esdata:  
  
    